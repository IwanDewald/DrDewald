df[, 1, drop = F]
df$x
identical(df$x, df[1, ])
identical(df$x, df[, 1])
df$y[1:3]
identical(df$y[1:3], df[1:3, 1])
identical(df$y[1:3], df[1:3, 2])
df[df$x %% 2 == 0, ]
df[, df$x %% 2 == 0]
m <- as.matrix(df)
m
df$z <- c(letters[1:10])
df
m <- as.matrix(df)
m
df <- attitude
df
str(df)
df$learning <- sort(df$learning)
View(df)
df$learning <- sort(df$learning, decreasing = T)
View(df)
df <- df[ , df$learning = c(1:5)]
df <- df[ , df$learning == c(1:5)]
df
View(df)
View(df)
df <- attitude
df$learning <- sort(df$learning, decreasing = T)
head(df)
df <- head(df)
df
df[-nrow(df), 2] + df[-nrow(df), 5] + df[-nrow(df), 6]
max(df$learning)
df[-nrow(df), 2] + df[-nrow(df), 5] + df[-nrow(df), 7]
which(attitude == df[5, ])
which(attitude$rating == 81)
which(attitude$complaints == 78)
df[-nrow(df), 2]
sum(df[-nrow(df), 2])
df <- attitude
View(df)
View(df)
df$learning <- sort(df$learning, decreasing = T)
df <- attitude
df$learning
sort(df)
sort(df[, 4])
sort(df[, 4], decreasing = T)
mean(df$learning)
sd(df$learning)
df[df$learning > 67]
df[, df$learning > 67]
df[df$learning > 67, ]
df <- df[df$learning > 67, ]
View(df)
View(df)
lst <- sort(df$learning)
lst
lst <- sort(df$learning, decreasing = T)
lst
df$learning
lst <- sort(df$learning, decreasing = T)[1:5]
lst
df[df$learning == lst]
df2 <- df[df$learning == lst, ]
View(df2)
View(df2)
df2 <- df[idential(df$learning, lst), ]
df2 <- df[identical(df$learning, lst), ]
df2
df2 <- df[df$learning %in% lst, ]
df2
md <- read.table('C:\\Johannes\\Bioinformatics\\exomcog_2.vcf')
View(md)
View(md)
df2["complaints"] + df2["raises"] + df2["advance"]
df2["complaints"]
head(x = md, n = 10)
?complete.cases
complete.cases(df)
?na.omit
df$NA <- rep(NA, nrow(df))
df$NA_col <- rep(NA, nrow(df))
df$NA_col
df[complete.cases(df), ]
df <- na.omit(df)
df
df$NA <- rep(NA, nrow(df))
df$NA_col <- rep(NA, nrow(df))
df$NA_col
df2$NA_col <- rep(NA, nrow(df2))
na.omit(df)
df2
na.exclude(df)
na.omit(df2)
df2
na.exclude(df2)
df2
df2[complete.cases(df2), ]
df2[, complete.cases(df2) ]
View(df)
View(df)
df2$new_var <- 0
df <- attitude[attitude$rating < 50, names(attitude) != "rating"]
View(df)
df <- subset(attitude, rating < 50, -rating)
View(df)
df <- attitude[attitude$rating < 50, -"rating"]
df <-  subset(sel = -rating, sub = rating < 50, attitude)
View(df)
df <- subset(attitude, rating < 50, -rating)
View(df)
df <- attitude[rating < 50, names(attitude) != "rating"]
rm(list = ls(-md))
rm(df, df2, lst)
View(attitude[attitude$rating < 50, names(attitude) != "rating"])
View(subset(sel = -rating, sub = rating < 50, attitude))
View(subset(attitude, rating < 50, -rating))
View(attitude[rating < 50, names(attitude) != "rating"])
ls
ls()
rm(md)
data("attitude")
View(attitude[rating < 50, names(attitude) != "rating"])
View(subset(sel = -rating, sub = rating < 50, attitude))
View(subset(attitude, rating < 50, -rating))
rm(attitude)
View(attitude[attitude$rating < 50, names(attitude) != "rating"])
df <- quakes
View(df)
str(df)
tail(df)
tail(quakes)
min(df$mag)
ma[(df$mag)
]
max(df$mag)
median(df$depth)
mean(df$depth)
system.time(any(!complete.cases(df)))
system.time(df[!is.na(df), ])
system.time(df[!is.na(df), ]) == system.time(any(!complete.cases(df)))
system.time(df[!is.na(df), ]) * 10000
system.time(df[!is.na(df), ]) * 10000000000000
df <- read.csv('https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv')
str(df)
df2 <- read.csv2('https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv')
str(df2)
View(df2)
View(df2)
df2 <- read.csv2('C:\\Johannes\\Bioinformatics\\R\\RRRRRR.csv2')
str(df2)
df2 <- read.csv2('C:\\Johannes\\Bioinformatics\\R\\RRRRRR.csv2', sep = ';', comment.char = '#')
View(df2)
View(df2)
names(df2)
names(df2)[-length(names(df2))] <- "PB"
names(df2)
df2 <- read.csv2('C:\\Johannes\\Bioinformatics\\R\\RRRRRR.csv2', sep = ';', comment.char = '#')
names(df2)[length(names(df2))]
names(df2)[length(names(df2))] <- "PB"
names(df2)
str(df2)
is.numeric(df$Subpoint)
all(is.numeric(df$Subpoint))
all(is.character(df$Subpoint))
any(is.character(df$Subpoint))
as.numeric(df$Subpoint)
is.numeric(df2$Subpoint)
df2$Subpoint[!is.numeric(df2$Subpoint)]
df2$Subpoint[!is.numeric(df2$Subpoint)]
df2$Subpoint[c(8, 9)]
df2$Subpoint[c(8, 9)] <- NA
df2$Subpoint
df2$Subpoint <- as.numeric(df2$Subpoint)
df2$Subpoint
str(df2)
df2[3:ncol(df2)] <- as.numeric(df2[3:ncol(df2)])
df2[ , 3:ncol(df2)] <- as.numeric(, df2[3:ncol(df2)])
df2[ , 3:ncol(df2)] <- as.numeric(df2[, 3:ncol(df2)])
cv <- names(df2)[-(1:4)][c(T, F, T, F, T, F, F, F, T, F, T, T)]
cv
df2[, cv] <- as.numeric(df2[, cv])
df2[cv] <- as.numeric(df2[cv])
df2[[cv]
df2[[cv]
]
df2[[cv]]
df2[names(df2) %in% cv]
df2[names(df2) %in% cv][1]
df2[names(df2) %in% cv][1:length(cv)]
df2[names(df2) %in% cv][1:length(cv)] <- as.factor(df2[names(df2) %in% cv][1:length(cv)])
df2[names(df2) %in% cv][1:length(cv)] <- as.numeric(df2[names(df2) %in% cv][1:length(cv)])
as.numeric(df2[names(df2) %in% cv][1:length(cv)])
as.numeric(df2[names(df2) %in% cv])
unlist(as.numeric(df2[names(df2) %in% cv]))
as.numeric(unlist(df2[names(df2) %in% cv]))
as.numeric(unlist(df2[names(df2) %in% cv][1:length(cv)]))
cv
df2$DBHt <- as.numeric(df2$DBHt)
df2$WHt <- as.numeric(df2$WHt)
f <- function(x) {
x <- as.numeric(x)
}
f(df2)
df2$EHt <- as.numeric(df2$EHt)
df2$HHt <- as.numeric(df2$HHt)
df2$LHt <- as.numeric(df2$LHt)
str(df2)
df2$VOR <- as.numeric(df2$VOR)
str(df2)
which(!is.numeric(df2$PB))
df2$PB[8] <- NA
df$PB <- as.numeric(df2$PB)
df2$PB <- as.numeric(df2$PB)
str(df2)
summary(df)
cbind(df, df2)
rbind(df, df2)
df2$Observer <- NA
rbind(df, df2)
df2 <- rbind(df, df2)
View(df2)
View(df2)
cv <- names(df2)[-(1:4)][c(T, F)]
cv
df2$total_coverage <- rowSums(df2[, cv])
mean(df2$total_coverage)
any(!complete.cases(df2$total_coverage))
which(!complete.cases(df2$total_coverage))
df2$total_coverage <- rowSums(df2[, cv], na.rm = T)
mean(df2$total_coverage)
summary(df2$total_coverage)
any(!complete.cases(df2$PB))
which(!complete.cases(df2$PB))
df2$PB[1078] <- 1
summary(df2$total_coverage)
df2$total_coverage <- rowSums(df2[, cv])
summary(df2$total_coverage)
df3 <- read.csv('https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv')
df3$total_coverage <- rowSums(df3[, cv])
df3$total_coverage
summary(df3$total_coverage)
rm(df3)
names(df)
cv <- names(df)[-(1:5)][c(F, T)]
cv
cv <- names(df)[-(1:5)][c(T, F)]
cv
max(df[[cv]])
df[df %in% cv]
df[df %in% cv, ]
df[, df %in% cv]
df[, names(df) %in% cv]
df2 <- df[, names(df) %in% cv]
View(df2)
summary(df2)
length("Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян.")
sum(("Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян."))
??length
has_length("Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян.")
?nchar
nchar("Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян.")
paste0("Iwan", "Dewald")
paste("Iwan", "Dewald")
paste(“Author”, “is”, “a”, “newbie”)
paste(“Author”, “is”, “a”, “newbie”)
paste("Author", "is", "a", "newbie")
paste("Author", c("is", "a", "newbie"))
paste(c("Угарный", "Веселящий"), "газ")
s <- paste(c("Угарный", "Веселящий"), "газ")
strsplit(s)
strsplit(s, " ", fixed = T)
strsplit(s, " ", fixed = F)
length(NA)
nchar(NA)
s <- "Iwan"
f <- factor(sample(x = LETTERS[1:10], 30, replace = T))
f
as.numeric(f)
as.character(f)
f <- factor(rep(x = c("male", female)))
f <- factor(rep(x = c("male", "female")))
f
f <- factor(rep(x = c("male", female), 10))
f <- factor(rep(x = c("male", "female"), 10))
f
as.numeric(f)
cut(rnorm(n = 10), breaks = -5:5)
cut(rnorm(10), breaks = -5:5)
cut(x = rnorm(10), breaks = -5:5)
rnorm(10)
cut(x = rnorm(10), breaks = -1:1)
hist(table(cut(rnorm(1000)), -5:5))
hist(table(cut(rnorm(1000), -5:5)))
hist(cut(rnorm(1000), -5:5))
hist(as.vector(cut(rnorm(1000), -5:5)))
hist(as.numeric(cut(rnorm(1000), -5:5)))
t(table(cut(rnorm(1000), -5:5)))
table(cut(rnorm(1000), -5:5))
?tapply
df3 <- read.csv('https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv')
View(df3)
View(df3)
df2
df2 <- read.csv2('C:\\Johannes\\Bioinformatics\\R\\RRRRRR.csv2', sep = ';', comment.char = '#')
rm(df3)
View(df2)
View(df2)
??quakes
df <- qakes
df <- quakes
rm(df2)
View(df)
cut(x = df$mag, 0.5)
cut(x = df$mag, 0:0.5)
cut(x = df$mag, breaks = 1:2)
min(df$mag)
max(df$mag)
cut(df$mag, 4:6.5)
cut(df$mag, 4.0:6.5)
cut(df$mag, c(4.0, 4.5, 5.0, 5.5, 6.0, 6.5))
cut(df$mag, c(3.99, 4.5, 5.0, 5.5, 6.0, 6.5))
table(cut(df$mag, c(3.99, 4.5, 5.0, 5.5, 6.0, 6.5)))
hist(df$mag)
?str_detect
library(stringr)
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit)
str_detect(fruit, "a")
str_detect("aecfg", letters)
str_extract("aecfg", letters)
df3 <- read.csv('https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv')
rm(df)
rm(fruit)
str(df3)
covere_vars <- names(df3)[str_detect(string = names(df3), pattern = "^P")]
covere_vars
coverege_vars <- names(df3)[str_detect(string = names(df3), pattern = "^P")]
rm(covere_vars)
df3$total_coverege <- rowSums(df3[, coverege_vars])
View(df3)
df3$site_name <- str_replace(df3$Site, pattern = "[[:numeric:]]", "")
df3$site_name <- str_replace(df3$Site, pattern = "[[:digit:]]", "")
df3$site_name <- str_replace(df3$Site, pattern = "[[:digit:]]+", "")
tapply(df3$total_coverege, df3$site_name, min)
height_vector <- names(df3)[str_detect(string = names(df3), pattern = ".+Ht")]
height_vector
tapply(df3[, height_vector], df3$Observer, max)
df3$Observer <- as.factor(df3$Observer)
tapply(df3[, height_vector], df3$Observer, max)
df3[, height_vector]
tapply(df3[, "DBHt"], df3$Observer, max)
tapply(df3[, "WHt"], df3$Observer, max)
tapply(df3[, "EHt"], df3$Observer, max)
tapply(df3[, "AHt"], df3$Observer, max)
tapply(df3[, "HHt"], df3$Observer, max)
tapply(df3[, "LHt"], df3$Observer, max)
saply(tapply(df3[, "LHt"], df3$Observer, max), max)
sapply(tapply(df3[, "LHt"], df3$Observer, max), max)
sapply(X = tapply(df3[, "LHt"], df3$Observer, max), FUN = max)
sapply(X = list(tapply(df3[, "LHt"], df3$Observer, max)), FUN = max)
sapply(X = factor(tapply(df3[, "LHt"], df3$Observer, max)), FUN = max)
sapply(X = tapply(df3[, "^Ht"], df3$Observer, max)), FUN = max)
sapply(X = tapply(df3[, height_vector], df3$Observer, max)), FUN = max)
sapply(X = tapply(df3[, height_vector], df3$Observer, max), FUN = max)
sapply(X = tapply(df3[, "DBHt"], df3$Observer, max), FUN = max)
df3[, "DBHt"]
tapply(df3[, "DBHt"], df3$Observer, max)
sapply(X = tapply(df3[, "WHt"], df3$Observer, max), FUN = max)
max(tapply(df3[, "WHt"], df3$Observer, max))
ordered(tapply(df3[, "WHt"], df3$Observer, max))
ordered(tapply(df3[, "EHt"], df3$Observer, max))
ordered(tapply(df3[, "AHt"], df3$Observer, max))
ordered(tapply(df3[, "HHt"], df3$Observer, max))
ordered(tapply(df3[, "LHt"], df3$Observer, max))
f <- function(x) {
g <- function(y) if (y > 0) 1 else if (y < 0) -1 else 0
sapply(x, g)
}
sd
var
norm
methods(plot)[1:20]
plot.lm
anyNA(c(NA, 1, 0, 2))
anyNA(mtcars)
'%+%'
%+%
`%+%`
`%in%`
integrate
`%*%`
?methods
plot
sum(1:5, 1:10)
1:5 + 1:10
(1:5) + (1:10)
(1:5) + (1:5)
?outer
decorate_string <- function(x, y) {
paste(x, y)
}
decorate_string("abc", "123")
decorate_string <- function(x, y) {
paste0(x, y)
}
??reverse
rev("123")
library(stringi)
stri_reverse("123")
decorate_string <- function(x, y) {
paste0(x, y, stri_reverse(x))
}
decorate_string <- function(pattern, str) {
paste0(pattern, str, stri_reverse(pattern))
}
decorate_string(pattern = "123", "abc")
?paste0
decorate_string <- function(pattern, ..., sep = "", collapse = NULL) {
for (x in list(...)) {
paste(pattern, x, stri_reverse(pattern), sep = sep, collapse = collapse)
}
}
decorate_string(pattern = "123", "abc")
decorate_string <- function(pattern, ..., sep = "", collapse = NULL) {
for (x in list(...)) {
res <- paste(pattern, x, stri_reverse(pattern), sep = sep, collapse = collapse)
}
return(res)
}
decorate_string(pattern = "123", "abc")
decorate_string(pattern = "123", "abc", "def")
decorate_string(pattern = "123", c("abc", "def"))
decorate_string(pattern = "123", "abc", "def", sep = "+")
decorate_string(pattern = "!", c("x", "x"), collapse = "_")
1+1
x <- c(1, 2, 5, 7, 11)
rm(list = ls)
rm(list = ls())
for (i in 1:84) {
for (j in i:85) {
temp <- for_cycle[, for_cycle[, i] == for_cycle[, j]]
buff <- cbind(buff, temp)
}
}
# Hackaton, finction-version
# Объединение нескольких файлов в один dataframe
read_data <- function() {
df <- data.frame(rep(NA, 500)) # пустой df, который мы вернем
for (i in dir(pattern = '*.ct')) { # только к файлам с расширением .ct
temp_df <- read.table(i, header = T) # создаем буфер, в котором будет храниться i-ый df
df <- cbind(df, temp_df[, c(2, 5)]) # склеиваем столбцы в наш df
}
return(df[-1]) # и возвращаем его
}
df <- read_data()
names(df)[3:4] <- c("Nuc1", "chrom1_1215")
buff <- rep(NA, 500)
for_cycle <- df[, c(F, T)]
for (i in 1:84) {
for (j in i:85) {
temp <- for_cycle[, for_cycle[, i] == for_cycle[, j]]
buff <- cbind(buff, temp)
}
}
getwd()
setwd(dir = 'C:\\Users\\XE\\Documents\\GitHub\\R_stuff\\ENCODE_NF-kB_peaks\\RNA_structures\\Turbofold_RNA_out')
df <- read_data()
names(df)[3:4] <- c("Nuc1", "chrom1_1215")
buff <- rep(NA, 500)
for_cycle <- df[, c(F, T)]
for (i in 1:84) {
for (j in i:85) {
temp <- for_cycle[, for_cycle[, i] == for_cycle[, j]]
buff <- cbind(buff, temp)
}
}
for (i in 1:84) {
for (j in i:85) {
temp <- for_cycle[for_cycle[, i] == for_cycle[, j], ]
buff <- cbind(buff, temp)
}
}
for_cycle[for_cycle[, i] == for_cycle[, j], ]
t <- for_cycle[for_cycle[, i] == for_cycle[, j], ]
View(t)
View(t)
?cbind
?data.frame
buff <- data.frame(x = rep(NA, 3665), y = rep(NA, 500))
rm(buff)
buff <- data.frame(x = rep(NA, 3665), y = rep(NA, 500))
buff <- data.frame(x = rep(NA, 3665), y = t(rep(NA, 500))
)
View(buff)
View(buff)
for_cycle <- df[, c(F, T)]
for (i in 1:84) {
for (j in i:85) {
temp <- for_cycle[for_cycle[, i] == for_cycle[, j], ]
buff <- cbind(buff, temp, )
}
}
for (i in 1:84) {
for (j in i:85) {
temp <- for_cycle[for_cycle[, i] == for_cycle[, j], ]
buff <- cbind(buff, temp)
}
}
